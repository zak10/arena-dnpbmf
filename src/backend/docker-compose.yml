version: '3.8'

services:
  # Django web application service
  web:
    build:
      context: .
      dockerfile: Dockerfile
    command: ./scripts/start-server.sh
    volumes:
      - .:/app
      - media_data:/app/media
      - static_data:/app/static
    ports:
      - "8000:8000"
    environment:
      - DJANGO_SETTINGS_MODULE=arena.settings.development
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/arena
      - REDIS_URL=redis://redis:6379/0
      - PYTHONUNBUFFERED=1
      - SERVICE_TYPE=web
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_STORAGE_BUCKET_NAME=${AWS_STORAGE_BUCKET_NAME}
      - AWS_REGION=${AWS_REGION:-us-east-1}
    depends_on:
      - db
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Celery worker service
  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
    command: ./scripts/start-celery.sh
    volumes:
      - .:/app
      - media_data:/app/media
    environment:
      - DJANGO_SETTINGS_MODULE=arena.settings.development
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/arena
      - REDIS_URL=redis://redis:6379/0
      - PYTHONUNBUFFERED=1
      - SERVICE_TYPE=worker
      - CONCURRENCY=2
      - LOG_LEVEL=info
    depends_on:
      - db
      - redis
    healthcheck:
      test: ["CMD", "celery", "-A", "arena", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 384M

  # Celery beat service for scheduled tasks
  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile
    command: celery -A arena beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - .:/app
    environment:
      - DJANGO_SETTINGS_MODULE=arena.settings.development
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/arena
      - REDIS_URL=redis://redis:6379/0
      - PYTHONUNBUFFERED=1
      - SERVICE_TYPE=beat
    depends_on:
      - db
      - redis
    restart: unless-stopped
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 128M

  # PostgreSQL database service
  db:
    image: postgres:14-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=arena
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_HOST_AUTH_METHOD=trust
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Redis service for caching and message broker
  redis:
    image: redis:6-alpine
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 256M

volumes:
  postgres_data:
    name: arena_postgres_data
  redis_data:
    name: arena_redis_data
  media_data:
    name: arena_media_data
  static_data:
    name: arena_static_data

networks:
  backend:
    driver: bridge
    internal: true
    name: arena_backend